/* Generated By:JavaCC: Do not edit this line. JavaCCParserConstants.java */
package jminusminus;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int BEGIN_COMMENT = 6;
  /** RegularExpression Id. */
  int END_COMMENT = 7;
  /** RegularExpression Id. */
  int COMMENT = 8;
  /** RegularExpression Id. */
  int BEGIN_MULTILINE_COMMENT = 9;
  /** RegularExpression Id. */
  int END_MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int MULTI_COMMENT = 11;
  /** RegularExpression Id. */
  int BREAK = 12;
  /** RegularExpression Id. */
  int CASE = 13;
  /** RegularExpression Id. */
  int CATCH = 14;
  /** RegularExpression Id. */
  int CONTINUE = 15;
  /** RegularExpression Id. */
  int DEFLT = 16;
  /** RegularExpression Id. */
  int DO = 17;
  /** RegularExpression Id. */
  int DOUBLE = 18;
  /** RegularExpression Id. */
  int FINALLY = 19;
  /** RegularExpression Id. */
  int FOR = 20;
  /** RegularExpression Id. */
  int IMPLEMENTS = 21;
  /** RegularExpression Id. */
  int INTERFACE = 22;
  /** RegularExpression Id. */
  int LONG = 23;
  /** RegularExpression Id. */
  int SWITCH = 24;
  /** RegularExpression Id. */
  int THROW = 25;
  /** RegularExpression Id. */
  int THROWS = 26;
  /** RegularExpression Id. */
  int TRY = 27;
  /** RegularExpression Id. */
  int ABSTRACT = 28;
  /** RegularExpression Id. */
  int BOOLEAN = 29;
  /** RegularExpression Id. */
  int CHAR = 30;
  /** RegularExpression Id. */
  int CLASS = 31;
  /** RegularExpression Id. */
  int ELSE = 32;
  /** RegularExpression Id. */
  int EXTENDS = 33;
  /** RegularExpression Id. */
  int FALSE = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int IMPORT = 36;
  /** RegularExpression Id. */
  int INSTANCEOF = 37;
  /** RegularExpression Id. */
  int INT = 38;
  /** RegularExpression Id. */
  int NEW = 39;
  /** RegularExpression Id. */
  int NULL = 40;
  /** RegularExpression Id. */
  int PACKAGE = 41;
  /** RegularExpression Id. */
  int PRIVATE = 42;
  /** RegularExpression Id. */
  int PROTECTED = 43;
  /** RegularExpression Id. */
  int PUBLIC = 44;
  /** RegularExpression Id. */
  int RETURN = 45;
  /** RegularExpression Id. */
  int STATIC = 46;
  /** RegularExpression Id. */
  int SUPER = 47;
  /** RegularExpression Id. */
  int THIS = 48;
  /** RegularExpression Id. */
  int TRUE = 49;
  /** RegularExpression Id. */
  int VOID = 50;
  /** RegularExpression Id. */
  int WHILE = 51;
  /** RegularExpression Id. */
  int COMMA = 52;
  /** RegularExpression Id. */
  int DOT = 53;
  /** RegularExpression Id. */
  int LBRACK = 54;
  /** RegularExpression Id. */
  int LCURLY = 55;
  /** RegularExpression Id. */
  int LPAREN = 56;
  /** RegularExpression Id. */
  int RPAREN = 57;
  /** RegularExpression Id. */
  int RBRACK = 58;
  /** RegularExpression Id. */
  int RCURLY = 59;
  /** RegularExpression Id. */
  int SEMI = 60;
  /** RegularExpression Id. */
  int QUESTION = 61;
  /** RegularExpression Id. */
  int COLON = 62;
  /** RegularExpression Id. */
  int NOT = 63;
  /** RegularExpression Id. */
  int NOT_EQUAL = 64;
  /** RegularExpression Id. */
  int DIV = 65;
  /** RegularExpression Id. */
  int DIV_ASSIGN = 66;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 67;
  /** RegularExpression Id. */
  int STAR_ASSIGN = 68;
  /** RegularExpression Id. */
  int REM = 69;
  /** RegularExpression Id. */
  int REM_ASSIGN = 70;
  /** RegularExpression Id. */
  int ARSHIFT = 71;
  /** RegularExpression Id. */
  int ARSHIFT_ASSIGN = 72;
  /** RegularExpression Id. */
  int LRSHIFT = 73;
  /** RegularExpression Id. */
  int LRSHIFT_ASSIGN = 74;
  /** RegularExpression Id. */
  int GE = 75;
  /** RegularExpression Id. */
  int ALSHIFT = 76;
  /** RegularExpression Id. */
  int ALSHIFT_ASSIGN = 77;
  /** RegularExpression Id. */
  int LT = 78;
  /** RegularExpression Id. */
  int XOR = 79;
  /** RegularExpression Id. */
  int XOR_ASSIGN = 80;
  /** RegularExpression Id. */
  int OR = 81;
  /** RegularExpression Id. */
  int OR_ASSIGN = 82;
  /** RegularExpression Id. */
  int LOR = 83;
  /** RegularExpression Id. */
  int AND = 84;
  /** RegularExpression Id. */
  int AND_ASSIGN = 85;
  /** RegularExpression Id. */
  int ASSIGN = 86;
  /** RegularExpression Id. */
  int DEC = 87;
  /** RegularExpression Id. */
  int EQUAL = 88;
  /** RegularExpression Id. */
  int GT = 89;
  /** RegularExpression Id. */
  int INC = 90;
  /** RegularExpression Id. */
  int LAND = 91;
  /** RegularExpression Id. */
  int LE = 92;
  /** RegularExpression Id. */
  int LNOT = 93;
  /** RegularExpression Id. */
  int MINUS = 94;
  /** RegularExpression Id. */
  int PLUS = 95;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 96;
  /** RegularExpression Id. */
  int STAR = 97;
  /** RegularExpression Id. */
  int IDENTIFIER = 98;
  /** RegularExpression Id. */
  int LETTER = 99;
  /** RegularExpression Id. */
  int DIGIT = 100;
  /** RegularExpression Id. */
  int INT_LITERAL = 101;
  /** RegularExpression Id. */
  int DIGITS = 102;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 103;
  /** RegularExpression Id. */
  int LONG_LITERAL = 104;
  /** RegularExpression Id. */
  int EXPONENT = 105;
  /** RegularExpression Id. */
  int SUFFIX = 106;
  /** RegularExpression Id. */
  int DOUBLE_LITERAL = 107;
  /** RegularExpression Id. */
  int STRING_LITERAL = 108;
  /** RegularExpression Id. */
  int ESC = 109;
  /** RegularExpression Id. */
  int ERROR = 110;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<END_COMMENT>",
    "<COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<MULTI_COMMENT>",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"finally\"",
    "\"for\"",
    "\"implements\"",
    "\"interface\"",
    "\"long\"",
    "\"switch\"",
    "\"throw\"",
    "\"throws\"",
    "\"try\"",
    "\"abstract\"",
    "\"boolean\"",
    "\"char\"",
    "\"class\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"if\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"super\"",
    "\"this\"",
    "\"true\"",
    "\"void\"",
    "\"while\"",
    "\",\"",
    "\".\"",
    "\"[\"",
    "\"{\"",
    "\"(\"",
    "\")\"",
    "\"]\"",
    "\"}\"",
    "\";\"",
    "\"?\"",
    "\":\"",
    "\"~\"",
    "\"!=\"",
    "\"/\"",
    "\"/=\"",
    "\"-=\"",
    "\"*=\"",
    "\"%\"",
    "\"%=\"",
    "\">>\"",
    "\">>=\"",
    "\">>>\"",
    "\">>>=\"",
    "\">=\"",
    "\"<<\"",
    "\"<<=\"",
    "\"<\"",
    "\"^\"",
    "\"^=\"",
    "\"|\"",
    "\"|=\"",
    "\"||\"",
    "\"&\"",
    "\"&=\"",
    "\"=\"",
    "\"--\"",
    "\"==\"",
    "\">\"",
    "\"++\"",
    "\"&&\"",
    "\"<=\"",
    "\"!\"",
    "\"-\"",
    "\"+\"",
    "\"+=\"",
    "\"*\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INT_LITERAL>",
    "<DIGITS>",
    "<CHAR_LITERAL>",
    "<LONG_LITERAL>",
    "<EXPONENT>",
    "<SUFFIX>",
    "<DOUBLE_LITERAL>",
    "<STRING_LITERAL>",
    "<ESC>",
    "<ERROR>",
  };

}
